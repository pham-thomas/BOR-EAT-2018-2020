}else {
angle <- 0
hjust <- 0.5
}
if (multiple == T) {
ggplot(data = p, mapping = aes(x = get(type), y = estimate, group = StudyID)) +
geom_point(aes(color = StudyID), position = position_dodge(.5)) +
geom_errorbar(mapping = aes(x = get(type), ymin = lcl, ymax = ucl,
color = StudyID),  width = .1,
position = position_dodge(.5)) +
# Conditionally add breaks
{if(add_breaks)geom_vline(xintercept = region_breaks, linetype = "dotted")} +
ylab(ylabel) +
xlab(xlabel) +
scale_color_manual(values=c("#007EFF", "#FF8100")) +
theme_classic() +
theme(
panel.border = element_rect(colour = "black", fill=NA, size=.75),
axis.text.x = element_text(angle = angle, hjust = hjust),
plot.margin = margin(5.5, 5.5, 5.5, padding, "pt"),
legend.position = c(.12 ,.9)
)
}  else {
ggplot(data = p, mapping = aes(x = get(type), y = estimate)) +
geom_point() +
geom_errorbar(mapping = aes(x= get(type), ymin = lcl, ymax = ucl),
width = .1) +
# Conditionally add breaks
{if(add_breaks)geom_vline(xintercept = region_breaks, linetype = "dotted")} +
ylab(ylabel) +
xlab(xlabel) +
theme_classic() +
theme(
panel.border = element_rect(colour = "black", fill=NA, size=.75),
axis.text.x = element_text(angle = angle, hjust = hjust)
)
}
}
make.phi.table <- function(phi, standardized = T) {
ifelse(standardized, label <-  'Survival rate per 10km (SE)',
label <- 'Survival rate (SE)')
phi %>%
select(StudyID, reach_num, Reach, RKM, Region, Estimate = estimate, SE = se,
LCI = lcl, UCI = ucl, N= count) %>%
mutate(
Reach = str_remove_all(Reach, "\n"),
Estimate = round(Estimate, 2),
SE = round(SE, 2),
LCI = round(LCI, 2),
UCI = round(UCI, 2),
Estimate = paste0(Estimate, " (", as.character(SE), ")")
) %>%
rename(!!label := Estimate,
'Reach #' = reach_num) %>%
select(-SE)
}
plot.p <- function(p) {
p %>%
mutate(
Reach = factor(reach_num, levels = p$reach_num)
) %>%
ggplot(mapping = aes(x = reach_num, y = estimate)) +
geom_point() +
geom_errorbar(mapping = aes(ymin = lcl, ymax = ucl)) +
ylab("Detection probability") +
xlab("Reach") +
scale_x_continuous(breaks = p$reach_num) +
theme_classic() +
theme(
panel.border = element_rect(colour = "black", fill=NA, size=.75),
)
}
format.cum.surv <- function(cum_survival_all) {
cum_survival_all <- cum_survival_all %>%
add_column(
GEN = rep(reach.meta.aggregate$GEN[1:(length(reach.meta.aggregate$GEN))], length(studyIDs)),
RKM = rep(reach.meta.aggregate$GenRKM[1:(length(reach.meta.aggregate$GenRKM))], length(studyIDs)),
reach_num = rep(seq(0, (nrow(reach.meta.aggregate))-1, 1), length(studyIDs))
) %>%
left_join(
reach.meta.aggregate %>%
select(GEN, Region) %>%
distinct(),
by = c("GEN")
) %>%
mutate(
'Survival estimate (SE)' = paste0(cum.phi, " (", as.character(cum.phi.se), ")"),
'Reach #' = reach_num
) %>% filter(
GEN != "GoldenGateW"
)
}
plot.cum.surv <- function(cum_survival_all, add_breaks, multiple, padding = 5.5) {
if (multiple) {
cum_survival_all %>%
mutate(
GEN = factor(GEN, levels = reach.meta.aggregate$GEN,
labels = paste0(reach.meta.aggregate$GEN, " (",
reach.meta.aggregate$GenRKM, ")"))
) %>%
ggplot(mapping = aes(x = GEN, y = cum.phi, group = StudyID)) +
geom_point(size = 2, aes(color = StudyID)) +
geom_errorbar(mapping = aes(x= GEN, ymin = LCI, ymax = UCI,
color = StudyID),  width = .1) +
geom_line(size = 0.7, aes(color = StudyID)) +
{if(add_breaks)geom_vline(xintercept = region_breaks, linetype = "dotted")} +
ylab("Cumulative survival") +
xlab("Site (River KM)") +
scale_y_continuous(breaks = seq(0, 1, 0.1)) +
scale_color_manual(values=c("#007EFF", "#FF8100")) +
theme_classic() +
theme(
panel.border = element_rect(colour = "black", fill=NA, size=.5),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.margin = margin(5.5, 5.5, 5.5, padding, "pt"),
legend.position = c(.1 ,.12)
)
} else {
cum_survival_all %>%
mutate(
GEN = factor(GEN, levels = reach.meta.aggregate$GEN,
labels = paste0(reach.meta.aggregate$GEN, " (",
reach.meta.aggregate$GenRKM, ")"))
) %>%
ggplot(mapping = aes(x = GEN, y = cum.phi)) +
geom_point(size = 2) +
geom_errorbar(mapping = aes(x= GEN, ymin = LCI, ymax = UCI),  width = .1) +
geom_line(size = 0.7, group = 1) +
{if(add_breaks)geom_vline(xintercept = region_breaks, linetype = "dotted")} +
ylab("Cumulative survival") +
xlab("Site (River KM)") +
scale_y_continuous(breaks = seq(0, 1, 0.1)) +
theme_classic() +
theme(
panel.border = element_rect(colour = "black", fill=NA, size=.5),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.margin=unit(c(.5,.5,.5,1), "cm"),
)
}
}
### FOR 2019 REPORT FR Spring -----------------------------------
name <- "Winter_2019"
studyIDs <- c("Winter_2019")
replace_dict <- list(replace_with = list(c("Chipps"),
c("SacTrawl"),
c("Benicia")),
replace_list = list(c("ChippsE", "ChippsW"),
c("SacTrawl1", "SacTrawl2"),
c("BeniciaE", "BeniciaW")))
# Retreive ERDDAP data
all_detections <- lapply(studyIDs, get_detections)
### FOR 2019 REPORT FR Spring -----------------------------------
name <- "Winter_H_2019"
studyIDs <- c("Winter_H_2019")
replace_dict <- list(replace_with = list(c("Chipps"),
c("SacTrawl"),
c("Benicia")),
replace_list = list(c("ChippsE", "ChippsW"),
c("SacTrawl1", "SacTrawl2"),
c("BeniciaE", "BeniciaW")))
# Retreive ERDDAP data
all_detections <- lapply(studyIDs, get_detections)
# Yolo / Sac Movement -----------------------------------------------------
detections <- all_detections[[1]]
yolo_fish <- detections %>%
filter(
FishID %in% knights_fish
) %>%
mutate(
# If a fish is found in this list of GEN give it a 1 otherwise 0
remove = ifelse((GEN %in%  c( "Blw_FremontWeir", "Butte6", "Blw_FRConf", "Blw_FR_GS2", "Blw_Elkhorn_GS1", "TowerBridge", "I80-50_Br")), 1, 0)
) %>%
group_by(FishID) %>%
summarise(
remove = sum(remove)
) %>%
mutate(
direction = ifelse(remove == 0, "Yolo", "Sac")
)
knights_fish <- detections %>%
filter(GEN %in% c("Abv_FremontWeir", "Blw_Knights_GS3")) %>%
mutate(date = as.Date(time)) %>%
group_by(FishID, GEN) %>%
summarise(min_date = min(date))
View(knights_fish)
# Yolo / Sac Movement -----------------------------------------------------
detections <- all_detections[[1]]
yolo_fish <- detections %>%
filter(
FishID %in% knights_fish
) %>%
mutate(
# If a fish is found in this list of GEN give it a 1 otherwise 0
remove = ifelse((GEN %in%  c( "Blw_FremontWeir", "Butte6", "Blw_FRConf", "Blw_FR_GS2", "Blw_Elkhorn_GS1", "TowerBridge", "I80-50_Br")), 1, 0)
) %>%
group_by(FishID) %>%
summarise(
remove = sum(remove)
) %>%
mutate(
direction = ifelse(remove == 0, "Yolo", "Sac")
)
View(yolo_fish)
View(knights_fish)
View(knights_fish)
knights_fish <- detections %>%
filter(GEN %in% c("Knights_RST", "KnightsBlwRST", "Abv_FremontWeir")) %>%
mutate(date = as.Date(time)) %>%
group_by(FishID) %>%
summarise(min_date = min(date))
yolo_fish <- detections %>%
filter(
FishID %in% knights_fish$FishID
) %>%
mutate(
# If a fish is found in this list of GEN give it a 1 otherwise 0
remove = ifelse((GEN %in%  c( "Blw_FremontWeir", "Butte6", "Blw_FRConf", "Blw_FR_GS2", "Blw_Elkhorn_GS1", "TowerBridge", "I80-50_Br")), 1, 0)
) %>%
group_by(FishID) %>%
summarise(
remove = sum(remove)
) %>%
mutate(
direction = ifelse(remove == 0, "Yolo", "Sac")
)
sac_fish <- detections %>%
filter(FishID %in% yolo_fish$FishID[yolo_fish$direction == "Sac"])
yolo_fish <- detections %>%
filter(FishID %in% yolo_fish$FishID[yolo_fish$direction == "Yolo"])
View(sac_fish)
View(yolo_fish)
# Aggregate sites for both groups
sac_fish <- lapply(list(sac_fish), aggregate_GEN) %>%
bind_rows() %>%
mutate(Type = "Sacramento River")
# Get list of all receiver GEN
reach.meta <- all_detections %>%
bind_rows() %>%
distinct(GEN, GenRKM, Region, LAT, LON) %>%
# Necessary because detections files shows differing RKM, Lat, Lon for some GEN sometimes
group_by(GEN) %>%
summarise(
GenRKM = mean(GenRKM),
LAT = mean(LAT),
LON = mean(LON),
Region = first(Region)
) %>%
filter(
Region %in% c("Upper Sac R", "Lower Sac R", "Carquinez Strait",
"SF Bay") | GEN %in% c("ChippsE", "ChippsW"),
GEN != "Caldwell_Park"
) %>%
arrange(desc(GenRKM))
View(all_detections[[1]])
# Get list of all receiver GEN
reach.meta <- all_detections %>%
bind_rows() %>%
distinct(GEN, GenRKM, Region, GenLat, GenLon) %>%
# Necessary because detections files shows differing RKM, Lat, Lon for some GEN sometimes
group_by(GEN) %>%
summarise(
GenRKM = mean(GenRKM),
GenLat = mean(GenLat),
GenLon = mean(GenLon),
Region = first(Region)
) %>%
filter(
Region %in% c("Upper Sac R", "Lower Sac R", "Carquinez Strait",
"SF Bay") | GEN %in% c("ChippsE", "ChippsW"),
GEN != "Caldwell_Park"
) %>%
arrange(desc(GenRKM))
View(reach.meta)
yolo_fish <- detections %>%
filter(
FishID %in% knights_fish$FishID
) %>%
mutate(
# If a fish is found in this list of GEN give it a 1 otherwise 0
remove = ifelse((GEN %in%  c( "Blw_FremontWeir", "Butte6", "Blw_FRConf", "Blw_FR_GS2", "Blw_Elkhorn_GS1", "TowerBridge", "I80-50_Br")), 1, 0)
) %>%
group_by(FishID) %>%
summarise(
remove = sum(remove)
) %>%
mutate(
direction = ifelse(remove == 0, "Yolo", "Sac")
)
sac_fish <- detections %>%
filter(FishID %in% yolo_fish$FishID[yolo_fish$direction == "Sac"])
yolo_fish <- detections %>%
filter(FishID %in% yolo_fish$FishID[yolo_fish$direction == "Yolo"])
# Aggregate sites for both groups
sac_fish <- lapply(list(sac_fish), aggregate_GEN) %>%
bind_rows() %>%
mutate(Type = "Sacramento River")
yolo_fish <- lapply(list(yolo_fish), aggregate_GEN) %>%
bind_rows() %>%
mutate(Type = "Yolo Bypass")
calc_movement <- function(detections) {
min_detects <- detections %>%
filter(GEN %in% c("Abv_Yolo", "Chipps")) %>%
group_by(Type, FishID, GEN, GenRKM) %>%
# Get first time a fish was detected at either of those GEN
summarise(time = min(time)) %>%
group_by(Type, FishID) %>%
# Filter for those that have both sites cause we need both to calc movement
filter(n() == 2) %>%
summarise(
min_time = min(time),
max_time = max(time),
min_rkm = min(GenRKM),
max_rkm = max(GenRKM),
) %>%
mutate(
km_day = ifelse(Type == "Yolo Bypass", (102.3 / as.numeric(difftime(max_time, min_time, "days"))),
((max_rkm - min_rkm) / as.numeric(difftime(max_time, min_time, "days"))))
)
# %>%
#   group_by(Type) %>%
#   summarise(mean_km_day = mean(km_day),
#             sd = sd(km_day),
#             count = n())
}
yolo_movement <- calc_movement(yolo_fish)
View(yolo_fish)
View(sac_fish)
detections <- yolo_fish
detections %>%
filter(GEN %in% c("Abv_Yolo", "Chipps"))
detections %>%
filter(GEN %in% c("Abv_Yolo", "Chipps")) %>%
group_by(Type, FishID, GEN, GenRKM)
detections %>%
filter(GEN %in% c("Abv_Yolo", "Chipps")) %>%
group_by(Type, FishID, GEN, GenRKM) %>%
# Get first time a fish was detected at either of those GEN
summarise(time = min(time)) %>%
group_by(Type, FishID)
detections %>%
filter(GEN %in% c("Abv_Yolo", "Chipps")) %>%
group_by(Type, FishID, GEN, GenRKM) %>%
# Get first time a fish was detected at either of those GEN
summarise(time = min(time)) %>%
group_by(Type, FishID) %>%
# Filter for those that have both sites cause we need both to calc movement
filter(n() == 2)
detections %>%
filter(GEN %in% c("Abv_Yolo", "Chipps")) %>%
group_by(Type, FishID, GEN, GenRKM) %>%
# Get first time a fish was detected at either of those GEN
summarise(time = min(time))
View(detections %>%
filter(GEN %in% c("Abv_Yolo", "Chipps")) %>%
group_by(Type, FishID, GEN, GenRKM) %>%
# Get first time a fish was detected at either of those GEN
summarise(time = min(time)))
yolo_movement <- calc_movement(yolo_fish)
sac_movement <- calc_movement(sac_fish)
# Yolo / Sac Movement -----------------------------------------------------
detections <- all_detections[[1]]
knights_fish <- detections %>%
filter(GEN %in% c("Abv_FremontWeir", "Blw_Knights_GS3")) %>%
mutate(date = as.Date(time)) %>%
group_by(FishID, GEN) %>%
summarise(min_date = min(date))
# Yolo / Sac Movement -----------------------------------------------------
detections <- all_detections[[1]]
yolo_fish <- detections %>%
filter(
FishID %in% knights_fish$FishID
) %>%
mutate(
# If a fish is found in this list of GEN give it a 1 otherwise 0
remove = ifelse((GEN %in%  c( "Blw_FremontWeir", "Butte6", "Blw_FRConf", "Blw_FR_GS2", "Blw_Elkhorn_GS1", "TowerBridge", "I80-50_Br")), 1, 0)
) %>%
group_by(FishID) %>%
summarise(
remove = sum(remove)
) %>%
mutate(
direction = ifelse(remove == 0, "Yolo", "Sac")
)
View(yolo_fish)
sac_fish <- detections %>%
filter(FishID %in% yolo_fish$FishID[yolo_fish$direction == "Sac"])
yolo_fish <- detections %>%
filter(FishID %in% yolo_fish$FishID[yolo_fish$direction == "Yolo"])
# Aggregate sites for both groups
sac_fish <- lapply(list(sac_fish), aggregate_GEN) %>%
bind_rows() %>%
mutate(Type = "Sacramento River")
yolo_fish <- lapply(list(yolo_fish), aggregate_GEN) %>%
bind_rows() %>%
mutate(Type = "Yolo Bypass")
calc_movement <- function(detections) {
min_detects <- detections %>%
filter(GEN %in% c("Abv_Yolo", "Chipps")) %>%
group_by(Type, FishID, GEN, GenRKM) %>%
# Get first time a fish was detected at either of those GEN
summarise(time = min(time)) %>%
group_by(Type, FishID) %>%
# Filter for those that have both sites cause we need both to calc movement
filter(n() == 2) %>%
summarise(
min_time = min(time),
max_time = max(time),
min_rkm = min(GenRKM),
max_rkm = max(GenRKM),
) %>%
mutate(
km_day = ifelse(Type == "Yolo Bypass", (102.3 / as.numeric(difftime(max_time, min_time, "days"))),
((max_rkm - min_rkm) / as.numeric(difftime(max_time, min_time, "days"))))
)
# %>%
#   group_by(Type) %>%
#   summarise(mean_km_day = mean(km_day),
#             sd = sd(km_day),
#             count = n())
}
yolo_movement <- calc_movement(yolo_fish)
View(yolo_fish)
detections <- yolo_fish
detections %>%
filter(GEN %in% c("Abv_Yolo", "Chipps")) %>%
group_by(Type, FishID, GEN, GenRKM) %>%
# Get first time a fish was detected at either of those GEN
summarise(time = min(time)) %>%
group_by(Type, FishID)
detections %>%
filter(GEN %in% c("Abv_Yolo", "Chipps")) %>%
group_by(Type, FishID, GEN, GenRKM) %>%
# Get first time a fish was detected at either of those GEN
summarise(time = min(time)) %>%
group_by(Type, FishID) %>%
# Filter for those that have both sites cause we need both to calc movement
filter(n() == 2)
replace_dict <- list(replace_with = list(c("SacTrawl"),
c("Benicia"),
c("Chipps"),
c("Abv_Yolo"),
c("YB_LibertyIsBase"),
c("RioVista")),
replace_list = list(c("SacTrawl1", "SacTrawl2"),
c("BeniciaE", "BeniciaW"),
c("ChippsE", "ChippsW"),
c("Abv_FremontWeir", "Blw_Knights_GS3"),
c("YB_LibertyIsBase1", "YB_LibertyIsBase2"),
c("RioVistaUS", "RioVistaDS")))
# Aggregate sites for both groups
sac_fish <- lapply(list(sac_fish), aggregate_GEN) %>%
bind_rows() %>%
mutate(Type = "Sacramento River")
yolo_fish <- lapply(list(yolo_fish), aggregate_GEN) %>%
bind_rows() %>%
mutate(Type = "Yolo Bypass")
calc_movement <- function(detections) {
min_detects <- detections %>%
filter(GEN %in% c("Abv_Yolo", "Chipps")) %>%
group_by(Type, FishID, GEN, GenRKM) %>%
# Get first time a fish was detected at either of those GEN
summarise(time = min(time)) %>%
group_by(Type, FishID) %>%
# Filter for those that have both sites cause we need both to calc movement
filter(n() == 2) %>%
summarise(
min_time = min(time),
max_time = max(time),
min_rkm = min(GenRKM),
max_rkm = max(GenRKM),
) %>%
mutate(
km_day = ifelse(Type == "Yolo Bypass", (102.3 / as.numeric(difftime(max_time, min_time, "days"))),
((max_rkm - min_rkm) / as.numeric(difftime(max_time, min_time, "days"))))
)
# %>%
#   group_by(Type) %>%
#   summarise(mean_km_day = mean(km_day),
#             sd = sd(km_day),
#             count = n())
}
yolo_movement <- calc_movement(yolo_fish)
sac_movement <- calc_movement(sac_fish)
View(yolo_movement)
View(sac_movement)
mean(yolo_movement$km_day)
median(yolo_movement$km_day)
median(sac_movement$km_day)
detections <- yolo_fish
detections %>%
filter(GEN %in% c("Abv_Yolo", "Chipps")) %>%
group_by(Type, FishID, GEN, GenRKM) %>%
# Get first time a fish was detected at either of those GEN
summarise(time = min(time)) %>%
group_by(Type, FishID) %>%
# Filter for those that have both sites cause we need both to calc movement
filter(n() == 2) %>%
summarise(
min_time = min(time),
max_time = max(time),
min_rkm = min(GenRKM),
max_rkm = max(GenRKM),
)
View(yolo_movement)
View(detections %>%
filter(GEN %in% c("Abv_Yolo", "Chipps")) %>%
group_by(Type, FishID, GEN, GenRKM) %>%
# Get first time a fish was detected at either of those GEN
summarise(time = min(time)) %>%
group_by(Type, FishID) %>%
# Filter for those that have both sites cause we need both to calc movement
filter(n() == 2))
